文件 File
    什么是文件
        文件时用于数据存储的单位
        文件通常用来长期存储数据
        文件中的数据以字节为单位进行顺序存储的
    文件的操作流程：
        1.打开文件
        2.读/写文件
        3.关闭文件
        注：任何的操作系统，一个应用程序同时打开文件的个数有最大数限制
文件的打开函数：
    函数：
        open(filename, mode='rt')  用于打开一个文件
    参数：
        filename  文件的路径名字字符串(可以是绝对路径也可以是相对路径)
        mode   打开模式
            'r'  只读
            'w'  只写
            't'  文本
            ......
    返回值：
        文件流对象
    说明：
        打开文件出错时会触发OSError类型的错误！

mode 模式字符的含义
字符	含义
'r'	以只读方式打开(默认)
'w'	以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
'x'	创建一个新文件, 并以写模式打开这个文件, 如果文件存在则会产生"FileExistsError"错误
'a'	以只写文件打开一个文件，如果有原文件则追加到文件末尾
'b'	用二进制模式打开
't'	文本文件模式打开(默认)
'+'	为更新内容打开一个磁盘文件(可读可写)
缺省模式是 'rt'
'w+b' 可以实现二进制随机读写，当打开文件时，文件内容将被清零
'r+b' 以二进制读和更新模式打开文件, 打开文件时不会清空文件内容
'r+' 以文本模式读和更新模式打开文件, 打开文件时不会清空文件内容
文件的常用方法：
    方法名：
        f.close()   关闭文件(关闭后文件不能再读写会发生ValueError错误)
        读取数据方法
        F.read(size=-1)	从一个文件流中最多读取size个字符(文本文件)或字节(二进制文件),
                        如果不给出参数，则默认读取文件中全部的内容并返回
        F.readline()	读取一行数据, 如果到达文件尾则返回空行, 以'\n'结束
        F.readlines(max_chars=-1)	读取多行，返回每行字符串的列表, max_chars为最大
                        字符(或字节)数

# 此示例示意，文件的打开和读文件操作
try:
    # 打开文件
    myfile = open("./myfile.txt")  # 正常打开成功的文件
    myfile = open("./aaaa.py")  # 没有这个文件，打开失败

    print("打开文件成功")

    # 读/写文件

    # 关闭文件
    myfile.close()
    print("关闭文件成功")
except OSError：
    print("文件打开失败")

文本文件读方法：
    F.read(n)  # 读取n个字符数据(文本方式)或字节数据(二进制方式)
                # 当读到文件尾

# 此示例示意读取文件myfile.txt里的内容

try:
    myf = open("myfile.txt")
    print("打开文件成功")
    # 读取文件内容
    while True:
        s = myf.readline()
        if not s:
            print("读文件结束")
            break
        print("读取%d个字符" % len(s), "内容是：", s)

    myf.close()
    print("文件关闭成功")

except OSError:
    print("打开文件失败")

练习：
    自己写一个文件 info.txt 内容写入如下一些文字信息
        张三    20  100
        李四    21  96
        小王    22  98
        写程序将这些数据读取出来，并以如下格式打印在屏幕终端上
        张三  今年  20 岁，成绩是：100
        李四  今年  21 岁，成绩是：96
        小王  今年  22 岁，成绩是：98

文本文件的写操作
    方法：
        f.write(字符串或字节串)
    作用：
        写入字符串(文本文件操作))或字节串(二进制文件操作)到文件中
    返回值:
        成功写入的字符个数或字节个数
    写入数据方法:
        F.write(text)	写一个字符串到文件流中，返回写入的字符数(文本文件)或字节数(二进制文件)
        F.writelines(lines)	将字符串的列表或字符串的列表中的内容写入文件
        F.tell()	返回当前文件流读写指针的绝对位置(字节为单位)
        F.seek(offset, whence = 0)	改变数据流读写指针的位置，返回新的绝对位置
        F.flush()	把写入文件对象的缓存内容写入到磁盘
    示例：
        # 此示例示意打开一个文本文件，并向里面写入内容

    try:
        fw=open("mynote.txt", "w")  # "w",创建文件并写,清空文件内容
        fw=open("mynote.txt", "x")  # 如果原文件存在则报错
        fw=open("mynote.txt", "a")  # 追加
        # 写字符串到文件中...
        fw.write("ABC")
        fw.write("hello")  # 写入5个字符
        fw.write("world")  # 写入5个字符
        fw.write(["ABC", "123", "中文"])
        fw.close()
        print("写入文件成功")
    except OSError:
        print("打开文件失败")

练习：
    1.写一个程序，让用户输入很多个正整数，
    最后将这些整数，存入文件， mynumbers.txt中
    如：
        请输入：1
        请输入：2
        请输入：3
        请输入：4
        请输入：- 1  # 结束
        格式自己定义
    2.写一个程序，将上一个程序输入的内容从 mynumbers文件中读取
    出来，打印: 和

文本文件操作：
    模式字符: "t"

说明：
    1.对文本文件的读写要用字符串(str)进行读取和写入数据
    2.默认文件中存储的都为字符数据，在读写中会自动进行编码转换
    3.以行为单位分隔，在python 内部统一用"\n" 作为换行符进行分隔
各操作系统的换行符：
    Mac OS X / Linux 换行符： "\n"
    Windows 换行符："\r\n"

文件的迭代读取：
    文件流对象是可迭代对象，迭代过程将以换行符'\n'作为分隔符依次获取
    示例:
        f=open("myfile.txt")
        for line in f:
            print(line)  # 每次line绑定一行数据
        f.close()

标准输入输出文件：
    模块：sys
    sys.stdin       标准  输入文件(默认是键盘)
    sys.stdout      标准输出文件(默认是终端输出)
    sys.stderr      标准错误输出文件(默认是终端输出)
    示例见：
# 此示例示意 sys.stdin  用法
import sys

s=sys.stdin.read()  # 输入ctrl +d，为输入文件结束符
print("s=", s)

print("程序正常结束！")

# 此示例示意 sys.stdout和 sys.stderr用法
import sys

sys.stdout.write("hello world!!!\n")

sys.stderr.write("我的出现是个错误！！！\n")

sys.stdout.write("我是正常输出！\n")

sys.stdout.write("请吃药！！！\n")
sys.stdout.close()

print("我是print打印出来的文字！\n")

说明:
    标准文件不需要打开和关闭就可以直接使用

二进制文件操作
    二进制文件模式字符: 'b'
什么是二进制文件操作：
    默认文件中存储的都是以字节(byte)为单位的数据，通常有人为的格式
说明：
    对二进制文件的读写需要用字节串(bytes)进行操作
示例见：
try:
    fr=open("myfile.txt.py", "rb")
    # b = fr.read(10)
    b=fr.read(16)
    print(b)

    fr.close
    s=b.decode()  # 出错
    print("解码之后的内容是：", s)
except OSError:
    print("文件打开失败！")

b=bytes(range(256))
try:
    fw=open("mybinary.txt.py", "wb")
    fw.write(b)  # 写入字节串
    fw.close()
except OSError:
    print("写文件失败！")

思考：
    print函数是如何实现的，能否自己写一个myprint函数来代替print函数
    注：sys.stdout
方法一
import sys
def myprint(*args, sep = " ", end = "\n", file = sys.stdout, flush = False):
    flag=False  # 代表是否打印分隔符。sep
    for obj in args:
        s=str(obj)  # 转为字符串
        if flag:
            file.write(sep)
        flag=True
        file.write(s)
    file.write(end)  # 输出末尾字符
myprint(1, 2, 3, 1, sep = "*", end = "\n***\n")
方法二
import sys
def myprint(*args, sep = " ", end = "\n", file = sys.stdout, flush = False):
    L=[str(obj) for obj in args]
    file.write(sep.join(L))
    file.write(end)  # 输出末尾字符
myprint(1, 2, 3, 1, sep = "*", end = "\n***\n")

f.seek方法：
    作用：
        设置文件的读写位置
        通常只对二进制文件操作
    方法:
        f.seek(偏移量，whence = 相对位置)
    参数:
        偏移量：
            大于0的整数代表向文件末尾方向移动
            小于0代表向文件头方向移动
        相对位置：
            0 代表从文件头开始偏移
            1 代表从当前位置开始偏移
            2 代表从文件尾开始偏移
    示例见：
        # 此示例示意用文件流对象的seek方法来移动文件的读写指针位置
    try:
        fr=open("byte20.txt", "rb")
        b=fr.read(2)
        print(b)  # AB
        print("当前的读写位置是：", fr.tell())
        # 以下读取第5~10个字节'abcde'
        # fr.seek(5,0)  #从文件头向后移动5个字节
        # fr.seek(3,1)    #从当前位置向后移动3个字节
        fr.seek(-15, 2)  # 从文件尾向前移动15个字节
        print("移动后的读写位置是:", fr.tell())
        b=fr.read(5)  # "abcde"
        print("移动后：b=", b)

        fr.close()
    except OSError:
        print("打开文件失败！！！")

f.flush 方法：
作用：
    清空(清倒)缓冲区
第一种情况：
import time
f=open("myflush,txt", "w")
    f.write("hello"*10)
    f.flush()  # 强制清空缓冲区
while True:
    pass
f.close()

汉字编码：
两种(常见)：
    国际系列：
        GB18030(二字节或四字节编码，27533个汉字)
         GBK(二字节编码, 约21003个汉字)1990年
        GB2312(二字节编码，约7000汉字)(A1A1~FEFE)十六进制表示方式
        (Windows常用)
    国际标准：UNICODE16 < ----> UTF-8
        (Linux/Unix/Mac OS X/IOS/Android 常用)
            UNICODE32两种版本
    python3 字符串是UNICODE的编码   外部的是UTF-8
    UTF-8 (8-bit Unicode Transformation Format)
        Unicode < ----> Utf-8   可以互转
        0x0000--0x7F        1字节编码(与ASCII兼容)
        0x0080--0x07FF      2字节编码
        0x07FF--0xFFFF      3字节编码(汉字落在此区)
        0x10000---之后      4, 5, 6字节编码(Unicode32部分)
        汉字用UTF-8表示的时候都是3字节
    python 的编码(encode)字符串
        'gb2312'
        'gbk'
        'gb18030'
        'utf-8'
        'ASCII'
        ...
    ascII 只能兼容英文，只能对英文进行编码，不能对中文进行编码

编码注释：
    在python源文件的第一行或第二行写入的如下内容是编码注释
    编码注释的作用是告诉解释执行器当前文件的编码类型是什么
    如:
        #   _*_ coding:gbk _*_
        # 告诉python解释执行器，当前文件的编码是：gbk
        或
        # _*_ coding:utf-8 _*_

练习:
    1.写程序, 实现文件的复制, (注: 只复制文件, 不复制文件夹)
        要求:
        1)  要考虑文件关闭的问题
        2)  要考虑超大文件无法一下加载到内存的问题
        3)  要能复制二进制文件(非文本文件)
    2.为原学生信息管理程序添加两个功能:
        9) 从文件中读取数据(si.txt)
        10) 保存信息到文件(si.txt)
        说明:
        9)  相当于打开文件功能
        10) 相当于保存功能

def copy(scr_file, dst_file):
    '''scr_file: 源文件名
        dst_file: 目标文件名'''
    try:
        with open(scr_file, "rb") as fr, open(dst_file, "wb")as fw:
                while True:
                    b=fr.read(4096)
                    if not b:
                        break
                    fw.write(b)
    except OSError:
        return False
    return True

scr=input("请输入源文件名")
dst=input("请输入目标文件名")
if copy(scr, dst):
    print("复制文件成功！")
else:
    print("复制文件失败！")
# mywork.txt.py
