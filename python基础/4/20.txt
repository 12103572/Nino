异常(高级)
    异常语句回顾：
        try-except 捕获异常(得到异常通知), 把程序由异常状态转为正常状态
        try-finally 执行必须要执行的语句
        raise 发送异常通知，进入异常流程
        assert 根据条件发送AssertionError类型的异常通知

with 语句
    语法：
        with 表达式1[as 变量1], 表达式2[as 变量2], ......
            语句块
    作用：
        使用于对资源进行访问的场合，确保使用过程中不管是否发生异常，都会
        执行必要的"清理"操作，并释放资源，
            如:
                文件使用手自动关机，线程中锁的自动获取和释放等
    说明：
        执行表达式，用 as 子句中的变量绑定生成的对象
        with 语句并不改变异常的状态
    示例:
try:
    fr = open("test.txt", "r", encoding='utf-8')
    try:
        for line in fr:
            print(line)
    finally:
        fr.close()
except OSError:
    print("文件打开失败！")

# 此示例示意用with语句改写try-finally的用法
try:
    with open("test.txt", "r", encoding='utf-8') as fr:
        for line in fr:
            print(line)

    # fr.read()   出错，fr 已经被 with 语句自动关闭
except OSError:
    print("文件打开失败！")

环境管理器
    1.类内有 __enter__ 和 __exit__ 示例方法的类创建的实例称为环境管理器
    2.能够用 with 进行管理的对象必须是环境管理器
    3.__enter__ 将在进去 with 语句时被调用并返回由 as 变量管理的对象
    4.__exit__ 将在离开 with 语句时被调用，具可以用参数来判断在离开 with
      语句时是否有异常发生并作出相应的处理
示例：


class A:
    def __enter__(self):
        print("__enter__方法被调用")
        self.file = open("test.txt", encoding="utf-8")
        return self  # return 返回的对象会被 as 变量所绑定

    def __exit__(self, e_type, e_value, e_cb):
        self.file.close()
        if e_type is None:
            print("正常离开with语句")
        else:
            print("在离开with语句时发生了异常")
            print("异常类型是：", e_type)
            print("错误对象是：", e_value)
            print("追踪对象是：", e_cb)
        print("A.__exit__ 被调用，已离开with语句")


with A() as a:
    print(a.file.readline())
    # 3 / 0 #发生异常
    print("这是with语句内部的语句")

print("程序正常退出")

运算符 重载
    什么运算符重载：
        让自定义的类创建的对象(实例)能够使用运算符进行操作

    作用：
        让自定义的类的实例像内建对象一样进行运算符操作
        让程序简洁易读
        对自定义的对象将运算符赋予新的规则

算术运算符重载
    方法名                  运算符和表达式        说明
    __add__(self, rhs)       self + rhs          加法
    __sub__(self, rhs)       self - rhs          减法
    __mul__(self, rhs)       self * rhs          乘法
    __truediv__(self, rhs)   self / rhs          除法
    __floordiv__(self, rhs)  self // rhs         地板除
    __mod__(self, rhs)       self % rhs          求余
    __pow__(self, rhs)       self ** rhs         幂
    rhs(right hand side)   右手

二元运算符的重载方法格
    def __xxx__(self, other)
        ......
示例：


class Mynumber:
    def __init__(self, value):
        self.data = value

    def __repr__(self):
        return 'Mynumber(%d)' % self.data

    def __add__(self, other):
        return Mynumber(self.data + other.data)  # 创建一个新的对象并返回


n1 = Mynumber(100)
n2 = Mynumber(200)
print(n1)
# n3 = n1.__add__(n2)
n3 = n1 + n2  # 等同于 n3 = n1.__add(n2)
print(n1, '+', n2, '=', n3)

练习：
    自己将Mynumber类型实现减法操作

运算符重载说明：
    运算符重载的方法及参数已经有固定的含义，不建议改变原有含义

练习：
    1.实现两个自定义列表的相加
    classMylist:

    def __init__(self, iterable=()):
        ...

    L1 = Mylist([1, 2, 3])
    L2 = Mylist(range(4, 7))
    L3 = L1 + L2
    print(L3)  # Mylist([1,2,3,4,5,6])
    L4 = L2 + L1
    print(L4)  # Mylsit([4,5,6,1,2,3])
    L5 = L1 * 2
    print(L5)  # Mylist([1,2,3,1,2,3])


class Mylist:
    def __init__(self, iterable=()):
        '''此处用给定的可迭代对象iterable创建一个新的列表，
        绑定此对象的iterable 实例变量中'''
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)' % self.iterable

    def __add__(self, other):
        return Mylist(self.iterable + other.iterable)

    def __mul__(self, rhs):
        return Mylist(self.iterable * rhs)


L1 = Mylist([1, 2, 3])
L2 = Mylist(range(4, 7))
L3 = L1 + L2
print(L3)  # Mylist([1,2,3,4,5,6])
L4 = L2 + L1
print(L4)  # Mylsit([4,5,6,1,2,3])
L5 = L1 * 2
print(L5)  # Mylist([1,2,3,1,2,3])

反向算术运算符重载
    1. 当运算符的左侧为内建类型时，右侧为自定义类型进行算术运算符
       运算时，会出现TypeError错误
    2. 因无法修改 内建类的对应方法来实现运算符重载，此时需要使用反向运算

    方法名                  运算符和表达式        说明
    __radd__(self, lhs)       lhs + self         加法
    __rsub__(self, lhs)       lhs - self         减法
    __rmul__(self, lhs)       lhs * self         乘法
    __rtruediv__(self, lhs)   lhs / self         除法
    __rfloordiv__(self, lhs)  lhs // self         地板除
    __rmod__(self, lhs)       lhs % self         求余
    __rpow__(self, lhs)       lhs ** self         幂

    lhs(left hand side)   左手边

复合赋值算术运算符的重载
    1.以复合赋值算术运算符 x += y 为例，此运算符会优先
    调用x.__iadd__()方法，如果没有__iadd__方法时，会
    将复合赋值运算股 x += y 拆解为 x = x.__add__(y)方法
    如果不存在 __add__方法，则会触发 TypeError类型的错误
    其它复合赋值运算符也具有相同的规则

算术运算符重载
    方法名                  运算符和表达式        说明
    __iadd__(self, rhs)       self += rhs          加法
    __isub__(self, rhs)       self -= rhs          减法
    __imul__(self, rhs)       self *= rhs          乘法
    __itruediv__(self, rhs)   self /= rhs          除法
    __ifloordiv__(self, rhs)  self //= rhs          地板除
    __imod__(self, rhs)       self %= rhs          求余
    __ipow__(self, rhs)       self **= rhs          幂
示例：


class Mylist:
    def __init__(self, iterable=()):
        '''此处用给定的可迭代对象iterable创建一个新的列表，
        绑定此对象的iterable 实例变量中'''
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)' % self.iterable

    def __add__(self, other):
        return Mylist(self.iterable + other.iterable)

    def __mul__(self, rhs):
        return Mylist(self.iterable * rhs)

    def __rmul__(self, lhs):
        return Mylist(self.iterable * lhs)

    def __iadd__(self, rhs):
        self.iterable.extend(rhs.iterable)
        return self


L1 = Mylist([1, 2, 3])
L2 = Mylist(range(4, 7))
L1 += L2
print(L1)  # Mylist([1,2,3,4,5,6])

比较运算符的重载
    方法名                  运算符和表达式        说明
    __lt__(self, rhs)       self < rhs          小于
    __le__(self, rhs)       self <= rhs          小于等于
    __gt__(self, rhs)       self > rhs          大于
    __ge__(self, rhs)       self >= rhs          大于等于
    __eq__(self, rhs)       self == rhs          等于
    __ne__(self, rhs)       self != rhs          不等于

注：比较运算符通常返回布尔值 True 或 False

位运算符的重载
    方法名                  运算符和表达式           说明
    __and__(self, rhs)       self & rhs           位与
    __or__(self, rhs)        self | rhs           位或
    __xor__(self, rhs)       self ^ rhs           位异或
    __xlshift__(self, rhs)   self << rhs           左移
    __rshift__(self, rhs)    self >> rhs           右移

反向位运算符的重载
    方法名                  运算符和表达式           说明
    __rand__(self, rhs)       rhs & self         位与
    __ror__(self, rhs)        rhs | self         位或
    __rxor__(self, rhs)       rhs ^ self         位异或
    __rxlshift__(self, rhs)   rhs << self         左移
    __rrshift__(self, rhs)    rhs >> self         右移

复合赋值位运算符的重载
    方法名                  运算符和表达式             说明
    __iand__(self, rhs)       self &= rhs           位与
    __ior__(self, rhs)        self |= rhs           位或
    __ixor__(self, rhs)       self ^= rhs           位异或
    __ixlshift__(self, rhs)   self <<= rhs           左移
    __irshift__(self, rhs)    self >>= rhs           右移

一元运算符的重载
   方法名                   运算符和表达式             说明
 __neg__(self)               -self                   负号
 __pos__(self)               +self                   正号
 __invert__(self)            ~self                   取反

重载格式:
    class 类名:
        def __xxx__(self):
           ....
示例见:
class Mylist:
    def __init__(self,iterable=()):
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)'%self.iterable

    def __neg__(self):
        gen = (-x for x in self.iterable)
        return Mylist(gen)

    def __pos__(self):
        gen =(abs(x) for x in self.iterable)
        return Mylist(gen)

    def __invert__(self):
        return Mylist(reversed(self.iterable))

L1 = Mylist([1, -2, 3, -4, 5])
L2 = -L1  #L2 = L1.__neg__()
print("L2=", L2) #L2= Mylist([-1, 2, -3, 4, -5])
L3 = +L1
print(L3)
L4 = ~ L1
print(L4)

in / not in 运算符重载
    方法：
        def __contains__(self, e):
            return 真值或假值
    运算符和表达式：
        e in self
        或
        e not in self
    说明:
        not in 与 in 运算符返回值相反，只实现in即或,没有not in 对应的方法
    示例：
class Mylist:
    def __init__(self, iterable=()):
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)'%self.iterable

    def __contains__(self, e):
        return e in self.iterable

L1 = Mylist([1,-2,3,-4,5])
print(3 in L1)
print(4 in L1)
print(5 not in L1)

索引和切片运算符的重载
    方法名              运算符和表达式              说明
__getitem__(self, i)     x = self[i]               索引/切片取值
__setitem__(self, i, v)   self[i] = v               索引/切片赋值
__delitem__(self, i)     del self[i]               删除索引/切片

作用：
    让自定义类型的对象能够支持索引和切片操作

示例：
# 此示例示意索引运算符  [] 的重载
class Mylist:
    def __init__(self,iterable=()):
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)'%self.iterable

    def __getitem__(self, i):
        return  self.iterable[i]

    def __setitem__(self, i, v):
        self.iterable[i] = v

    def __delitem__(self, i):
        # raise ValueError # 不让别人删
        del self.iterable[i]

L1 = Mylist([1,-2,3,-4,5])
v= L1[2]  #等同于 v = L1.__getitem__(2)
print(v)

L1[1] = +2  #等同于L1.__setiem__(1,+2)
print(L1)

del L1[3] #等同于L1.__delitem__[3]
print(L1)

slice 构造函数：
    格式：
        slice(start=None,stop=None,step=None)
    作用：
        创建一个slice切片队形，此对象存储一个切片的起始值，终止值和步长信息
    slice 对象的属性
        s.start     切片的起始值(默认为None)
        s.stop      切片的终止值(默认为None)
        s.step      切片的步长(默认为None)

# 此示例示意切片运算符  [] 的重载
class Mylist:
    def __init__(self,iterable=()):
        self.iterable = [x for x in iterable]

    def __repr__(self):
        return 'Mylist(%s)'%self.iterable

    def __getitem__(self, i):
        print('__getiem__:i=',i)
        if type(i) is int:
            print('您正在做索引操作')
        elif type(i) is slice:
            print('您正在做切片操作')
            print("起始值是：", i.start)
            print("终止值是：", i.stop)
            print("步长是：", i.step)
        elif type(i) is str:
            print("您在用字符串操作")
            return 0
        return  self.iterable[i]


L1 = Mylist([1, -2, 3, -4, 5])
a = L1[::-1]  # a=L1.__getiem__(slice(None,None,None))
print(a)

--------------------------------------------------------------------
is 不能重载，只判断id, id一样就是True,  否则False
-------------------------------------------------------------------

特性属性 @property
    实现其它语言所拥有的getter 和 setter 功能

    作用:
        用来模拟一个属性
        通过@property 装饰器可以用模拟属性的赋值和取值加以控制

示例1：
class Student:
    def __init__(self, s):
        self.__score = s
    def getscore(self):
        return self.__score
    def setscore(self, s):
        assert 0 <= s <= 100, '成绩效验失败！'
        self.__score = s
stu = Student(59)

print(stu.getscore())
stu.setscore(99)
print(stu.getscore())

示例2：
class Student:
    def __init__(self,s):
        self.__score = s
    def getscore(self):
        return self.__score
    def setscore(self,s):
        assert 0 <= s <= 100,'成绩效验失败！'
        self.__score = s

    score = property(getscore,setscore)

stu = Student(59)
print(stu.score)   #取值   stu.getscore()
stu.score = 99     #赋值 stu.setscore(999)
print(stu.score)

示例3：
# 用装饰器方式实现特性属性
class Student:
    def __init__(self,s):
        self.__score = s

    @property
    def score(self):
        '''getter'''
        return self.__score

    @score.setter
    def score(self,s):
        '''setter'''
        assert 0 <= s <= 100,'成绩效验失败！'
        self.__score = s

stu = Student(59)
print(stu.score)  #取值   stu.getscore()
stu.score = 999  #赋值 stu.setscore(999)
print(stu.score)


PEP8编码规范

代码编排

1.使用4空格缩进，不使用Tab,更不允许用Tab和空格混合缩进
2.每行最大长度最大79字节，超过部分使用反斜杠折行
2.类和全局函数定义间隔两个空行,类内方法定义间隔一个空行.
  其它地方可以不加空行。

文档编排

1.其中import部分，要 按标准、三方和自己编写顺序依次排放，之间空一行。
2.不要在一句import中导入多个模块，比如不推荐import os, sys。
2.尽可能用import XX 而不采用from XX import YY引用库,因为可能出现名字冲突。

空格的使用

1.各种右括号前不用加空格
2.逗号、冒号、分号前不要加空格。
3.函数的左括号前不要加空格。如func(1)。
4.序列的左括号前不要加空格。如list[2]。
5.操作符左右各加一个空格，不要为了对齐增加空格。
6.函数默认参数使用的赋值符左右省略空格。
7.不要将多条语句写在同一行，尽管使用‘;’允许。
8.if/for/while语句中，即使执行语句只有一句，也必须另起一行


原则：避免不必要的空格


练习：
    实现有序集合类 OrderSet() 能实现两个集合的交集 &, 并集 | 补集 -,
    对称补集 ^, ==, !=, in, not in 等操作
        要求： 集合内部用list存储数据

    如:
      s1 = OrderSet([1, 2, 3, 4])
      s2 = OrderSet([3, 4, 5])
      print(s1 & s2)  # OrderSet([3, 4])
      print(s1 | s2)  # OrderSet([1, 2, 3, 4, 5])
      print(s1 ^ s2)  # OrderSet([1, 2, 5])
      if OrderSet([1, 2,3]) != s1:
          print("不相等")
      else:
          print("相等")
      if s2 == OrderSet([3, 4, 5]):
          print("s2 == OrderSet([3, 4, 5])")
      if 2 in s1:
          print('2 in s1')


class OrderSet:
    def __init__(self, iterable=()):
        self.data = iterable

    def __repr__(self):
        return 'OrderSet(%s)'%self.data

    def __and__(self,  rhs):
        return OrderSet(list(set(self.data) & set(rhs.data)))

    def __or__(self, rhs):
        return OrderSet(list(set(self.data) | set(rhs.data)))

    def __xor__(self, rhs):
        return OrderSet(list(set(self.data) ^ set(rhs.data)))

    def __ne__(self, rhs):
        if self.data != rhs.data:
            return True
        return False

    def __eq__(self, rhs):
        if self.data == rhs.data:
            return True
        return False

    def __contains__(self, e):
        return e in self.data


s1 = OrderSet([1, 2, 3, 4])
s2 = OrderSet([3, 4, 5])

print(s1 & s2)  # OrderSet([3, 4])
print(s1 | s2)  # OrderSet([1, 2, 3, 4, 5])
print(s1 ^ s2)  # OrderSet([1, 2, 5])

if OrderSet([1, 2, 3]) != s1:
    print("不相等")
else:
    print("相等")

if s2 == OrderSet([3, 4, 5]):
    print("s2 == OrderSet([3, 4, 5])")

if 2 in s1:
    print('2 in s1')
