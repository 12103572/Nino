glibals  和 locals  函数
    globals()   返回当前全局作用域内变量的字典
    locals()    返回当前局部作用域内变量的字典

    # 示例：
        a = 1
        b = 2
        c = 3

        def fn(c, d):
            e = 300
            # 能否在此处知道有哪些全局变量，哪些局部变量
            print("locals()返回:"，locals())
            print("globals()返回："，globals())
            print(c)  # 100
            print(globals()['c'])  # 3
            # 等同于
            dd = globals()
            print(dd['c'])  # 3
        fn(100, 200)

函数变量
    变量(没有类型，只记录对象的地址)
    对象(int 类型，float, str, list, dict, 函数(经常变)，类))
    函数名是变量，它在创建函数绑定一个函数

    示例:
        def f1():
            print("f1被调用")
        f2=f1  # <<<注意这里f1没加括号
        f2()  # 调用f2变量绑定的函数，让函数执行
        f1()
    示例2:
        def f1():
            print("f1")
        def f2():
            print("f2")
        f1, f2=f2, f1  # 交换两个变量的绑定关系
        f1()  # f2

一个函数可以作为另一个函数的实参传递
    示例：
        def f1():
            print("f1函数被调用")
        def f2():
            print("f2函数被调用")
        def fx(fn):
            print(fn)
            fn()
        fx(f1)
        fx(f2)
        fx(print)
        # fx(max)   #出错
案例：
    看懂如下代码：
        def myfun(fn):
            L=[1, 3, 5, 7, 9]
            return fn(L)
        print(myfun(max))  # 9
        print(myfun(min))  # 1
        print(myfun(sum))  # 25
        请问执行结果是什么？为什么？

函数可以作为另一个函数的返回值
    一个函数内部可以用return语句返回另一个函数的引用关系
    示例:
        # 此示例函数可以返回另一个函数的引用关系
        def get_function():
            s=input("请输入您要做的操作")
            if s == "求最大":
                return max
            elif s == "求最小"：
                return min
            elif s == "求和":
                return sum
        L=[2, 3, 4, 5, 6, 7, 8, 9]
        f=get_function()
        print(f(L))

练习:
    写一个计算公式的解释执行器，已知有如下一些函数
        def myadd(x, y):
            return x + y
        def mysub(x, y):
            return x - y
        def mymul(x, y):
            return x * y
        ...
    另有一个函数get_func, 有一个参数op 代表用给定的字符串:
        def get_func():
            ...
    此函数在传入字符串"加”或“+”，时返回myadd 函数
    此函数在传入字符串"减”或“-”，时返回mysub 函数
    ...
    在主函数中:
    def main():
        while True:
            s=input("请输入计算公式：")  # 10 +20
            L=s.split(' ')  # L=['10','加’，‘20’]
            a=int(L[0])
            b=int(L[2])
            fn=get_func(L[1])
            print("结果是：", fn(a, b))  # 结果是：30
    main()

函数的嵌套定义：
    函数嵌套定义是指一个函数里用def 语句来创建其他函数的情况
    示例:
        def fn_outer():
            print("fn_outer 被调用")
            def fn_inner():
                print("in_inter 被调用")
            fn_inner()
            print("fn_outer 调用结束")
        fn_outer()
        print("程序结束")

python 的作用域
    作用域也叫名字空间，是访问变量时查找变量名的范围空间

python 的四个作用域 LEGB
    作用域              英文解释                英文简写
 局部作用域(函数内)     Local(function)             L
 外部嵌套函数作用域     Enclosing function local    E
 函数定义所在模块的作用域 Global(module)             G
 python 内置模块的作用域  Builtin(python)           B

 示例:
    a=100
    def f1():
        a=200
        print("f1.a", a)
        def f2():
            a=300
            print("f2.a", a)
        f2()
    f1()
    print("a=", a)

变量名的查找规则:
    在访问变量时，在查找本地变量，然后是包裹此函数的外部的
    内部的变量，之后是全局变量，最后是内置变量，即：
        L - --> E---> G--->B
    在默认的情况下, 赋值语句只能在当前作用域内创建变量

global 语句
    作用：
        告诉解释器，global语句声明的一个或多个变量，这些
        变量的作用域为模块级的作用域，也称为全局作用域
        全局声明global 将赋值变量映射到模块文件内部的作用域
    语法:
        global 变量名1，变量名2, .。。
    示例:
        v=100
        def f1():
            global v  # 声明v为全局变量
            v=200  # 想让这条赋值语句干改变全局的v
        f1()
        print("v=", v)  # 200

    说明:
        1. 全局变量如果要在函数内部被赋值，则必须经过全局声明
        (否则会被认为是局部变量)
        2. 全局变量在函数内部不经过声明就可以直接访问
        3. 不能声明局部变量，再用global声明为全局变量，此做法
        不符合规则
        4. global 变量列表里的变量名不能出现在函数的形参列表里
    示例:
        v=100
        def f1():
            v=200
            # global v #报语法错误
            print("v=", v)
        f1()  # 200
        print("v=", v)  # 100

        v=100
        def fn(v):
            # global v # 报错
            v=200
            print(v)
        fn(300)  # 200
        print("全局的v="，v)  # 100

练习:
    用全局变量记录一个函数 hello 被调用的次数，部分代码如下：
        count=0
        def hello(name):
            print("你好")
        hello("校长")
        while True:
            s=input("请输入姓名：")
            if not s:
                break
            hello(s)
        print("hello函数调用的次数是", count)

nonlocal 语句
    作用:
        告诉解释执行器， nonlocal 声明的变量不是局部变量，
        也不是全局变量，而是外部嵌套函数内的变量
    语法:
        nonlacal 变量名1，变量名2...
    示例:
        v=100
        def f1():
            v=200
            print('函数开始时f1.v='，v)
            def f2():
                nonlocal v
                v=300  # 想让外部嵌套函数的v=300
                print("f2.v=", v)
            f2()
            print("函数结束时：f1.v=", v)
        f1()
        print("全局的v="，v)
    说明：
        1. nonlocal 语句只能在被嵌套的函数内部进行使用
        2. 对 nonlocal 变量进行赋值将对外部嵌套函数作用域内的
        变量进行操作
        3. 当有两层或两层以上函数嵌套时，访问 nonlocal 变量只对
        最近一层的变量进行操作
        4. nonlocal 语句的变量列表里的变量名，不能出现在此函数
        的形参列表中

lambda 表达式(又称匿名函数)
    作用:
        创建一个匿名函数对象
    语法格式:
        lambda [函数的形参列表]: 表达式
        注: []里面的内容可以为空
    返回值:
        函数对象的引用关系
    示例:
        def myadd(x, y):
            return x+y
        # 以下用lambda 表达式来改写上面的def 语句
        myadd=lambda x, y: x+y
        print("20 + 30 =", myadd(20, 30))  # 50
        print("40 + 50 =", myadd(40, 50))  # 90
    说明:
        lambda 表达式创建的函数只能包含一条表达式
        lambda 比函数简单且可以随时创建和销毁，有利于减少
        程序的偶合度(偶合度为程序模块之间的关联程度)

练习:
    写一个lambda 表达式:
    fx= lambda n:, ...
    此表达式创建一个函数，判断n这个数的2次方+1能否被5整除，
    如果能整除返回True, 否则返回False
    如:
    print(fx(3))  # True
    print(fx(4))  # False
    2.写一个lambda表达式来创建函数，此函数返回两个参数的最大值
    def mymax(x, y):
        ...
    mymax=lambda..
    print(mymax(100, 200))  # 123
    print(mymax("ABC", "123"))  # ABC

eval 和 exec 函数
eval 函数： expression value
    作用:
        把一个字符串当成一个表达式来执行，返回表达式执行后的结果
    格式：
        eval(source, global=Nine, local=None)
    参数:
        source 用于执行的表达式字符串
        global 用于描述source执行的全局变量环境的字典
        local 用于描述source执行的局部变量环境的字典
    示例见：
        s="1 + 2 * 3"  # s1是符合python语法规则的字符串
        s2="x + y"
        v=eval(s1)
        print(v)  # 7
        v2=eval(s2)  # 报错
        x=100, y=200
        v3=eval(s2)
        print(v2)  # 300
        v2=eval(s2, {'x': 10, 'y': 20})  # 30
        v2=eval(s2, {'x': 10, 'y': 20}, {'y': 2}  # 12)
exec 函数
    作用:
        把一个字符串当成程序来执行
    格式：
        exec(source, global=None, local=None)
    参数:
        source 用于执行的语句字符串
        global 用于描述source执行的全局变量环境的字典
        local 用于描述source执行的局部变量环境的字典
    示例:
        s = """
            def mymax(x,y):
                return x+y
            mymax(100,200)
                        """
        s1 = exec(s)
        print(s1)  # 300 需要输出 print

练习:
    1. 看懂下面的程序在做什么?

    def fx(f, x, y):
        print(f(x, y))
    fx((lambda a, b: a+b), 100, 200)
    fx((lambda a, b: a ** b), 3, 4)
    # 程序直到此处有几个全局变量？
    2.写一个函数 mysum(x) 来计算：
    1+2+3+4...+x 的和，并返回
    (要求：不允许调用 sum 函数)
    如：
        print(mysum(100))  # 5050
    3.写一个函数 myfac(n) 来计算 n！(n的阶乘)
    n！ = 1*2*3*4...*n
    如:
        print(mafac(5))  # 120
    4.写一个函数计算 1+2**2+3**3+...n**n的和
    (注: n 给个小点的数)
    5.实现有界面的学生信息管理程序
    选择菜单如下:
    +----------------------------------+
    | 1) 添加学生信息 |
    | 2) 显示学生信息 |
    | 3) 删除学生信息 |
    | 4) 修改学生成绩 |
    | q) 退出 |
    +----------------------------------+
    请选择：
        学生信息和存储方法与原程序相同: 用列表里包含来存信息
        要求: 每个功能写一个函数与之相对应
