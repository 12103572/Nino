元组　tuple
    1.元组是不可以改变的序列，同list一样，元组可以存放
    任意类型数据的容器
    2.可以认为，元组是不可变的列表

    序列：str(字符串) list(可变) tuple(元组) bytes bytearray(可变)
    占用内存少，数据安全，不可增删改，只可以查看

元组的表示方法:
    用小括号()括起来，单个元素括起来后加逗号（，）, 逗号区分元组
    还是单个元素
创建空元组：
    ()　　＃创建一个空元组
创建非空元组：
    t = 100
    t = (200,)
    t = (1, 2, 3)
    t = 100, 200, 300
注：　type(x)函数可以返回x的类型
        type(3)   'int'
        type(3.0)   'float'
        type([3])   'list'
        type(3,)    'tuple'

元组的错误示例：
    t = (20)      t 绑定２０这个整数，不是元组
    x, y, z = 100, 200, 300  # 序列赋值，不是元组
    x, y, z = (100, 200, 300)
    x, y, z = [100, 200, 300]
    x, y, z = 'ABC'
    x, y = y, x  # 序列赋值，实现交换

元组的构造函数：
    tuple() 生成一个空的元组，等同于()
    tuple(iterable) 用可迭代对象生成一个元组

    示例：
        t = typle()
        t = typle("ABC")
        t = tuple("range(1,10,2)")
        t = tuple([2, 3, 5, 7])

元组是可迭代对象
    t = tuple("ABC")
    for x in t:
        print(x)
    L = [x for x in t]

元组的运算
    算术运算：
    + += * *=
    用法等同于字符串的算术运算
    如：
        t = (1, 2, 3)+(4, 5, 6)　  # 元组只能加元组
        t += (7, 8, 9)  # 注：此处t绑定的对象的id会变化
        t = (1, 2, 3)*2     #
        t *= 3

元组的 in/not in　运算符
    判断一个值是否存在于元组中，如果存在返回True, 否则返回False
    (与列表的 in / not in 功能相同)
    索引　index
        用法等同于列表的索引
        注：元组不支持索引赋值
    切片:
        用法与列表的切片用法相同
        元组的切片返回一个新元组
        元组不能切片赋值

元组的方法:
    T.index(v[, begin[, end]])　返回对应元素的索引下标，
    begin为开始索引，end为结束索引，当v不存在时会出发
    ValueError类型的错误！
    t = (1, 2, 3, 6, 5, 4, 3, 2, 1)
    print(t.index(2, 0, 5))  # 1

    t.count(2)
    2
    T.count(x) 返回元组中对应元素的个数

三中序列　小结
str  只能字符，不可变
tuple　不可变
list    可变
都是容器
有先后顺序关系

能用于序列的函数总结：
    len(x)  max(x)  min(x) sum(x)   any(x)  all(x)
    构造函数：
    str(x) tuple(x) list(x)
    reversed(x) sorted(x, reverse=False)

字典：　dict
    什么是字典
    1.字典是一种可变的容器，可以存储任意类型的数据
    2.字典中的每个数据都是用"键(key)"进行索引，而不像
    序列(字符串，列表等)可以用整数下标进行索引
    3.字典内的数据没有先后顺序关系，字典的存储是无序的
    4.字典中的数据以键(key)-值(value)对的形式进行映射存储
    5.字典的键不能重复，且只能用不可变类型作为字典的键

字典的字面值表示方式：
    字典是以{}括起来，以冒号(: )分隔键值对，各键－值对之间用
    逗号分隔
创建空字典：
    d = {}
创建非空字典：
    d = {'姓名': 'tarena'，'年龄'：１５}
    d = {''}
键：（目录页（索引页））　查找字典最重要的东西　不可变
键值对重复的时候只保留一个（一般保留后面的）

字典的构造函数 dict：
    dict()  # 创建一个空的字典   等同于{}
    dict(iterable)  # 用可迭代对象初始化一个字典
    dict(**kwargs)  # 关键字传参形式生成一个字典

示例：
    d = dict{}  # d={}
    L = [(1, 2), [3, 4], "AB"]
    d = dict(L)  # d={1:2,3:4,‘A':'B'}
    d = dict(name='tarena', age=15)
    print(d)  # {'name': 'tarena', 'age': 15}
    注: 关键字传参时, 关键字的名字必须是符合标示符命名规则的字符串

字典的键(key)必须是不可变类型：
    bool, int, float, complex, str, tuple,
    frozenset(固定集合) 和 bytes(字节串)(后面才学)
    和　None

可变的数据类型:
    list, dict, set(集合), bytearray(字节数组)

字典的键索引
    用[]运算符可以获取字典内的"键"对应的值
    语法:
        v = 字典[键]
    示例:
        d = {'name': 'tarena', 'age': 20}
        print(d['name'], '今年'，d['age'], '岁'])

添加和修改字典的元素
    语法:
        字典[键]＝值
    说明:
        如果键不存在，创建键，并绑定键对应的值
        键存在，修改键绑定的值
    示例:
        d = {}
        d['name']= 'tarena'  # 创建'name'键，对应’tarena'
        d['age']= 16  # 创建'age'键，绑定16
        d['age']= 18  # 修改'age'键，绑定18
        print(d)  # {'name': 'tarena', 'age': 18}
        d['sex'] = 'girl'
        print(d)  # {'name': 'tarena', 'age': 18, 'sex': 'girl'}

del 语句
    删除字典的键，同时解除与值的绑定关系
    语法:
        del 字典[键]
    示例:
        d = {'name': 'tarena', 'age': 18, 'sex': 'girl'}
        del d['sex']  # 删除'sex'键
        print(d)  # {'name': 'tarena', 'age': 18}

    字典的成员资格判断　in / not in
        可以用 in 运算符来判断一个键是否存在于字典中，
        如果存在则返回 True，否则返回　False
        not in 与　in 结果相反
    示例:
        d = {'name': 'tarena', 'age': 18, 'sex': 'girl'}
        'name' in d  # True
        18 in d  # False
        'girl' not in d  # False
        'cup' not in d  # False

练习:
    1)写程序, 将如下信息形成一个字典　seasons
        '键'        '值'
        1           '春季有1,2,3月'
        2           '夏季有４,5,6月'
        3           '秋季有7,8,9月'
        4           '冬季有10,11,12月'
    2) 让用户输入一个整数代表这个季度，打印这个季度的信息，
    如果用户输入的信息不在字典内，则打印"信息不存在"

字典的迭代访问
    字典是可迭代对象，字典只能对键进行迭代访问
    示例:
        d={'一': 1, '二': 2, '三': 3}
        for key in d:
            print("键", key, "值", d[key])
            # 键 一 值 1  键 二 值 2  键 三 值 3

字典的比较:
    < <= > >= == !=
    == 字典是否完全相同(键，相同，值也相同则返回 True)
    != 与　== 相反

字典可以用于字典的内建函数:
    len(x)      返回字典的键值对的个数
    max(x)      返回字典的键的最大值
    min(x)      返回字典的键的最小值
    sum(x)      返回字典的所有键的和
    any(x)      真值测试，如果字典中其中一个键为真，则结果为　True
    all(x)      真值测试，如果字典中所有键为真，则返回 True

示例:
    d={0: '零'，５: '五'，8: '捌'，3: '叄'}
    len(d)  # 4
    max(d)  # 8
    min(d)  # 0
    sum(d)  # 16
    any(d)  # True
    all(d)  # False

字典的方法：
    文档参见: dict

练习:
    输入一段字符串，打印出这个字符串出现过的字符及出现过的字次数
    如:
        请输入: abcdabcaba
        打印:
            a: 4次
            b: 3次
            d: 1次
            c: 2次
            不要求打印次序

练习:
    写一个程序，输入一些单词和解释，将单词作为键，解释作为值
    存于字典中，当输入单词为空时结束输入
    ２）然后进入查词过程（死循环）
        输入单词，如果单词在字典中，则显示解释内容
        如果单词不存在，则提示"没有此单词"

字典推导式
    字典推导式是用可迭代对象依次生成字典内元素的表达式

语法：
    {键表达式：值表达式 for 变量　in 可迭代对象　[if 真值表达式]}
    注：[]代表内部的内容可以省略
示例：
    生成一个字典，键为数字(1-9)，值为键的平方
    d={x: x**2 for x in range(1, 10)}

练习：
    有如下字符串列表:
    L＝['tarena', 'xiaozhang'','hello']
    请生成如下字典：
    d={'tarena': 6, 'xiaozhang': 9, 'hello': 5}
    值为键的长度

练习:
    一直有两个等长度的列表list1　和list2，生成相应字典
    list1=[1001, 1002, 1005, 1008]
    list2=['Tom', 'Jerry', 'Spike', 'Type']
    生成的字典为：
    {'Tom': 1001....}

字典推导式的嵌套
    语法规则同列表的推导式

字典vs列表
    1.都是可变对象
    2.索引的方式不同(列表用整数索引，字典用键索引　)
    3.字典的插入，删除，修改的速度可能会快于列表(重要)
    4.列表的存储是有序的，字典的存储是无序的
