import copy
列表的索引操作
   index[]
索引的语法：
    列表[整数表达式]
用法：
    等同于字符串的索引
    索引分为正向索引和反向索引，规则与字符串的规则完全相同
示例：
    L = [1, 2, 3, 4, 5]
    print(l(1))  # 2
    print(l(-1))  # 5

列表的索引赋值操作
    列表是可变的序列，，可以通过索引赋值改变列表中的元素

    语法：
        列表[整数表达式] 　　= 表达式
    示例：
        l = [1, -2, 3, -4, 5]
        l[1] = 2
        print(l)  # [1,2,3,-4,5]
        l[-2] = 4
        print(l) =  # [1,2,3,4,5]

    列表的切片
        列表[:]
        列表[::]
        列表的切片是从列表中取出相应的元素，重新组成一个新的列表
        列表的切片规则等同于字符串的切片规则

    示例:
    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    l2 = [1:9:2]  # l2=[1,3,5,7]

列表的切片赋值
    作用：
        可以改变原列表的排序，可以插入，删除和修改数据
    语法：
        列表[切片slice] = 可迭代对象

    说明：
        赋值运算符的右侧必须是可迭代对象
    示例：
    l = [2, 3.1, 4.2, 5]
    l[1:3] = [3, 4]  # l=[2,3,4,5]
    l[1:3] = [3.1314，5]  # l=[2,3.1314,5]
    l[1:] = range(3, 7)  # l=[2,3,4,5,6]
    l = [2, 4]
    l[1:1] = [3]  # l=[2,3,4]
    l[0:0] = range(2)  # l=[0,1,2,3.4]
    l[5:5] = [5:6]  # l=[0,1,2,3.4.5.6]
    l = [2, 4]
    l = [0:0] = ["ab"]  # l=["ab",2,4]
    l = [::] = []  # 清空列表　不等t同于l=[]

    注意事项：
    # 第一种做法
    l = [1, 2, 3, 4]
    l2 = l
    l = []
    print(l2)  # l2=1,2,3,4

    l = [1, 2, 3, 4]
    l2 = l
    l[::] = []
    print(l2)  # l2=[]
练习：
    已知有列表
    L = [3, ５]
    用索引和切片操作，将原列表改为：
    L＝[1, 2, 3, 4, 5, 6]
    将列表翻转，删除最后一个元素后再打印此列表
    。。。
    print(L)  # [6,5,4,3,2](尽可能让L绑定的对象的ID不变)

del 语句
用于删除列表中的元素
    语法：
    del 列表[索引]
    del 列表[切片]
    示例：
    l = [1, 3.14, 2, 100, 3]
    del l[1]
    del l[2]
    print(l)　  # [1,2,3]

    说明：
        列表中的元素被删除，后续的索引值会变小，即后续元素前移
列表的切片操作的注意事项：
    对于步长不等于１的切片赋值，赋值运算符右侧的可迭代对象
    提供的元素个数，一定要等于切片切出的段数
    如：
    　l = [１，２，３，４，５]
    　l[::2] = "abc"  # True
     l[::2] = "abcde"  # False

python3 中常用的序列函数
len(seq)    返回序列的长度
max(x)      返回序列的最大值元素（要求每两个元素都能比较大小）
min(x)      返回序列的最小值元素
sum(x)      返回序列中所有元素的和（元素必须是数值类型）
any(x)      真值测试，如果列表其中一个值为真值，则返回True
all(x)      真值测试，如果列表中所有值都为真值才返回True, 否则返回False

示例：
    L = [1, 3, 14, 0, 999999, 10]
    len(L)  # 5
    max(L)  # 999999
    min(L)  # 0
    sum(L)  # 1000013.14
    any(L)  # True
    all(L)  # False

序列相关的函数２
reversed(sep)   返回原序列的反向顺序的可迭代对象
sorted(interable, revers=False)  返回可迭代对象中排序后的对象的列表
示例：
    L = [5, 9, 7, 1, 3]
    for x in reversed(L):
        print(x)  # 3,1,7,9,5
    L2 = sorted(L)  # L2=[1,3,5,7,9]
    l3 = sorted(L, reverse=True)  # L3=[9,7,5,3,1]

练习:
    输入一些正整数，存入一个列表L中，当输入－１时结束输入
    １．打印出列表中存有的数字
    ２，打印出您输入的数字的最大数
    ３．打印出您输入的这些数的平均值

python3 中常用的列表方法（method）
    详见　>> >help(list)
    文档参见：

练习：
    １．写一个程序，让用户输入两个以上的正整数，当输入负数时结束，
    要求：限制用户，不允许输入重复的数
    １）打印这些数字的和
    ２）打印这些数中最大的一个数
    ３）打印这些数中第二大的一个数
    ４）删除最小的数
    ２．做完上题后思考：
        如何保证原数据的顺序不变，最后按原来的顺序打印出剩余
        的数？

深拷贝和　浅拷贝
１．不拷贝
    l1 = [1, 2, [3.1, 3.2]]
    l2 = l1  # 不拷贝，两个变量同时绑定在一个对象上
    l2[l] = 2.2  # [1,2.2,[3.14,3.2]]
    l[2][0] = 3.14  # [1,2.2,[3.14,3.2]]

2.浅拷贝　shallow copy
浅拷贝是指在复制过程中，只复制一层变量，不会复制深层
变量绑定的对象的复制过程
示例：
l1 = [1, 2, [3.1, 3.2]]
l2 = l1.copy()
l2[1] = 2.2
l2[2][0] = 3.14
print(l1)  # [1, 2, [3.14, 3.2]]
print(l2)　　　  # [1, 2.2, [3.14, 3.2]]

３．深拷贝　deep copy
深拷贝是指在复制过程中，复制所有变量及变量关联的深层变量绑定
的对象，实现两个对象完全独立
示例：
    import copy  # 导入复制模块（语句后面会讲）
l1 = [1, 2, [3.1, 3.2]]
l2 = copy.deepcopy(l1)  # 深拷贝
l2[1] = 2.2
l2[2][0] = 3.14
print(l1)  # [1, 2, [3.14, 3.2]]
print(l2) 　  # [1, 2.2, [3.14, 3.2]]

思考：
l1 = [1, 2, "hello"]
l2 = l1.copy()
l3 = copy.deepcopy(l1)
l2[2] += "!"
l3[2] += "?"
print(l1)  # [1, 2, 'hello']
print(l2)  # [1, 2, 'hello!']
print(l3)   # [1, 2, 'hello？']

列表和字符串比较
    列表和字符串都是序列，元素之间有先后顺序关系
    字符串是不可以改变的序列，列表是可以改变的序列
    字符串只能存储字符，而列表可以存储任意类型的对象
    列表和字符串都是可迭代对象

不可变数据类型：
    占用内存相对较少，数据安全，但不能实现添加．删除等操作
可变数据类型
    占用内存比较多，可以实现灵活的添加．删除．修改等操作

字符串文本解析方法split, splitlines, 和join
    S.split(sep=None) 将字符串使用sep作用分隔Ｓ字符串，返回分割之后的
字符串列表，当不给定参数时，用空白字符作为分隔符
    Ｓ.splitlines(sep=None) 将字符串以行为单位进行分割，形成分割
    的列表
    join(itreable)　用可迭代对象中的字符串，返回一个中间用
    Ｓ进行分割的字符串

示例：
    s = 'beijing is capital'
    l = split(' ')  # l=['beijing','is','capital']
    s = 'a b c d\nABCD\n1 2 3 4\n'
    l = s.splitlines()  # l=['a b c d','ABCD','1 2 3 4']
    s = ['c:', 'Programe ', 'files', 'python3']
    s = '\\'.join(s)  # s=r'c:\Programe\files\python3

练习：
    有字符串＂hello"，生成字符串＂h e l l o"和"h-e-l-l-o"

列表推导式  lisr comprehension
    列表推导式是用可迭代对象来创建列表的表达式

    作用：
        用简易方法创建列表
    语法：
        [表达式　for 变量 in 可迭代对象]
        或
        [表达式 for 变量　in　可迭代对象　if 真值表达式]
    示例：
        生成一个数字1~9的整数的平方的列表，即：
        Ｌ＝[1，4，9, 25, 36....81]
        L = []
        for x　in range(1, 10)：
            L.append(x**2)
        print(L)

练习：
    用列表推导式生成1~100　内所有奇数的列表

列表推导式的嵌套:
    [表达式1　for 变量1 in 可迭代对象　if 真值表达式1
    for 变量2 in 可迭代对象2 if 真值表达式2
    ．．．]
示例：
    Ｌ＝[x+y for x in [10, 20, 30]for y in[1, 2, 3]]
    print(L)  # [11,12,13,21,22,23,31,32,33]

练习：
    用字符串＂ＡＢＣ＂和字符串＂１２３＂生成如下列表：
    ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']

练习：
1.输入一个开始的整数用begin绑定
    输入一个结束的整数用end绑定
    将从begin开始，到end结束（不包含end）的偶数存于列表中，
    并打印此列表
    （建议用列表推导式实现）
2.已知有字符串：
    s = '100,200,300,500,800'
    将其转化为列表，列表内部为位数字:
    L＝[100, 200, 300, 500, 800]
3.已知有一个列表中存有很多数，还有重复的，如：
    L = [1, 3, 2, 1, 6, 4, 2, ...98, 82]
    1)　将列表中出现数字存入一个列表L2中
        要求：重复出现多次的数字只能在L2中保留一份（去重）
    2) 将L列表中出现两次的数字存于另外一个列表L3中，在L3中只
    保留一份
4．写程序，生成前４０个斐波那契数（Fibonacci）
    1 1 2 3 5 8 13...
    要求将这些数存于一个列表中，最后打印这些数
