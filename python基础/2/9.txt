python　函数参数的传递
    把数据给函数
传递方式:
    1.位置传参
      序列传参
    2.关键字传参
    　字典关键字传参

位置传参
    实际参数(实参)与形式参数(形参)的对应关系，是按照位置来依次对应的
    示意:
        def mymin(a,b,c):
            pass
        mymin(1,2,3)
    说明:
        实参和形参按位置进行匹配
        实参的个数必须与形参个数相同
    示例:
        #此示例示意位置传参
    def myfun1(a,b,c):
        #这是一个有三个参数的函数
        print("a=",a)
        print("b=",b)
        print("c=",c)
    myfun1(1,2,3)
    myfun1(100,200,300)

序列传参
    序列传参是指在函数调用过程中，用星号(＊)将列表拆解后按位置
    进行参数传递的方式
    示例:
    def myfun1(a,b,c):
        #这是一个有三个参数的函数
        print("a=",a)
        print("b=",b)
        print("c=",c)
    L=[1,2,3]
    myfun1(*L)  #拆解序列
    #myfun1(L[0],L[1],L[2])
    T=[100,200,300]
    myfun1(*T)
    s="ABC"
    myfun1(*s)
    说明:
        序列传参时，序列拆解的位置将与形参一一对应

关键字传参
    是指传参时，按照形参的名称给形参赋值
    实参和形参按名称进行匹配

    示例:
     def myfun1(a,b,c):
        #这是一个有三个参数的函数
        print("a=",a)
        print("b=",b)
        print("c=",c
myfun1(c=3,b=2,a=1) #关键字传参
    说明:
        实参和形参按照名称进行匹配，可以不按位置进行匹配
        实参中的关键字要在形参中存在

字典关键字传参
    是指实参为字典，将字典用两个星号(**)拆解后进行关键字传参
    的传递方式
    示例:　　#此示例示意字典关键字传参
    def myfun1(a,b,c):
        #这是一个有三个参数的函数
        print("a=",a)
        print("b=",b)
        print("c=",c)
    d={'c':33,'b':22,'a':11}
    #myfun1(c=d['c'],b=d['b'],a=d['a'])
    myfun1(**d) #等同于myfun1(c=33,b=22,a=11)
    说明:
        1.字典的键名和形参名必须一致
        2.字典的键名必须是符合标识符命名规则的字符串
        3.字典的键要在形参存在

函数的综合传参
    1.函数的传参方式，在形参能唯一匹配到相应的实参的
    情况下可以任意组合
    2.函数的位置传参要先于关键字传参
    示例:
        def myfun1(a,b,c):
            pass
        myfun1(100,*[200,300])      #正确
        myfun1(*[100,200],300)      #正确
        myfun1(*[100],*"AB")        #正确
        myfun1(*[100],200,*[300])   #正确
        myfun1(1,c=3,b=2)           #正确
        myfun1(c=3,**{'b':2,'a':1}) #正确

函数的参数传递的过程
    示例:
        a=100
        b=200
        def f1(x,y):
            print(x+y)
        f1(a,b) # x= a y=b
        #实参给形参进行赋值传递，并不会复制新的对象:
        #即x和a同时引用100.y和b同时引用200

可变的数据类型作为函数的参数传递
    示例:
        a=[1,2,3]
        b=4
        def f2(x,y):
            x.append(y)
        f2(a,b)
        print(a) #[1,2,3,4]
        print(b) #4
        f2(a,300)
        print(a) #[1,2,3，4,300]
    示例２：
        a=[1,2,3]
        b=200
        def f3(x,y)
            x=x+[y] #此处改变的是变量，不是对象
        f3(a,b)
        print(a) #[1,2,3]
        print(b) #200

－－－－－－－－－以下讲函数的形参－－－－－－－－－－－－－－－
函数的缺省参数
    语法:
        def 函数名(形参名１＝默认实参１，形参名２＝，默认实参２．。。。):
            语句块
    示例:
        #此示例示意函数的缺省参数
    def info(name,age=1 ,address="不详")：
        print(name,"今年",age,'岁','家庭住址:',address)
    info("魏明泽"，35，"北京市朝阳区")
    info("tarena",15)
    info("老王")
    info() #出错
    作用:
        让调用更加方便，无需传入无关的实参
    说明：
        缺省参数必须自右至左依次存在，如果一个参数有缺省
        参数，则其右侧的所有参数都必须有缺省参数，如:
        def info(a,b=10,c): #错误的
        缺省参数可以有0个，1个或多个，甚至全部都有缺省参数
    示例:
        def fn(a=1,b=2,c=3): #对的
        def fn(a=0,b,c=3):   #错的

练习:
    写一个函数myadd,此函数可以计算两个数，三个数和四个数的和
    如：
        def myadd(...):
            ...and
        print(myadd(10,20))       #30
        print(myadd(100,200,300)) #600
        print(myadd(1,2,3,4))     #10

函数形参的定义方式：
    1.位置形参
    2.星号元组形参
    3.命名关键字形参
    4.双星号字典形参

位置形参：
    语法：
        def 函数名(形参1,形参2,...)
            语句块

星号元组形参：
    语法：
        def 函数名(*元组形参名)：
            语句块
    作用:
        收集多余的位置传参
    说明：
        元组参名一般命名为'args'
    示例：
        #此示例示意星号元组形参的定义及使用
        def func(*args):
            print("实参的个数是：",len(args))
            print("args=",args)
        func()
        func(1,2,3,4)
        func(1,2,3,4,'AAA','BBB')

练习:
    写一个函数mysum　可以传入任意个数字实参，返回所有实参的和
    如：
        def mysum(...):
            ...
        print(mysum(1,2))
        print(mysum(1,,2,3,4))
        print(mysum(1,2,34,5,6,7,8))

命名关键字形参
    语法：
        def 函数名(*,命名关键字形参1，命名关键字形参2,...)
        语句块
        或　函数名(*args,命名关键字形参1，命名关键字形参2....)
        语句块
    作用:
        强制所有的参数都必须用关键字传参或字典关键字传参传递
    示例:
        #此示例示意命名关键字形参的定义方法和调用传参
        def func1(a,b,*,c,d):
            print(a,b,c,d)
        func1(1,2,3,4)   #<<<---让此处出错
        func1(11,22,d=44,c=33)

        def func1(a,b,*args,c,d):
            print(a,b,args,c,d)
        func1(1,2,c=3,d=4)
        func1(11,22,d=44,c=33)
        func1(1,2,3,4,c=100,d=200)

双星号字典形参:
    语法：
        def 函数名(**字典形参名):
            语句块
        作用:
            收集多余的关键字传参
        说明:
            字典形参名一般命名为'kwargs'
            一个函数内字典形参最多只能有一个
        示例:
            #此示例示意字典关键字形参
        def func(**kwargs):
            print("关键字参数的个数是：",len(kwargs))
            print("kwargs=",kwargs)
        func(name="魏明泽",age=35,address='朝阳区')
        func(a=1,b=2.c=3,d="ABC",e=[1,2,3])

函数的参数说明:
    位置形参，缺省参数，星号元组形参，双星号字典形参可以混合使用

    函数参数自左至右的顺序为：
        位置形参
        星号元组形参
        命名关键字形参
        双星号形参
    示例:
    def fn(a,b,*args,c，**kwargs):
        pass #后面返回空
    fn(100,200,300,400,c=1,d=2,e=3)

    def fn(a,b,*args,c,**kwargs):
        print(a,b,args,c,kwargs)
    fn(100,200,300,400,c=1,d=2,e=3)
    100 200 (300, 400) 1 {'d': 2, 'e': 3}

练习:
    已知内建函数　max的帮助文档是:
    >>> help(max)
    max(iterable)
    max(arg1,arg2,args)
    仿造max写一个mymax函数，功能与max函数完全相同
    （要求:不允许调用max函数）
    print(mymax([6,8,5,3]))  #8
    print(mymax(100,200))  #200
    print(mymax(1,2,5,9,7)) #9

可以接收任意的位置传参和关键字传参的形参列表
    def fn(*args,**kwargs)
        print(args,kwargs)
    fn(1,2,3,4,*"ABC",**{"d":4},a=1,b=2,c=3)
    (1, 2, 3, 4, 'A', 'B', 'C')
    {'d': 4, 'a': 1, 'b': 2, 'c': 3}

全局变量和局部变量
    局部变量    local variable
        定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
        局部变量只能在函数内部使用
        局部变量在函数调用时才能被创建，在函数调用后会自动销毁
    全局变量    global variable
        定义在函数外部，模块内部的变量称为全局变量
        全局变量，所有函数都可以直接访问(但函数内部不能将其赋值)
    示例:
        #此示例示意全局变量和局部变量
        a=100　　#全局变量
        b=200   #全局变量
        def fx(c):  #f(x)也是全局，它绑定一个函数
            d=400   #c,d是局部变量
            print(a,b,c,d)
        fx(300)     #100,200,300,400
        print(a,b)　#100,200
        print(c,d)  #c,d变量在此作用域内不存在

练习:
1.写一个函数　isprime(x)判断x是否是素数,如果为素数则返回
    Ture,否则返回False
2.写一个函数prime_m2n(m,n),返回从m开始,到n结束范围内
全部的素数(不包含n),返回这些素数的列表,并打印
如:
    L＝prime_m2n(10,20)
    print(L)  #[11,13,17,19]
3.写一个函数primes(n),返回指定范围内n(不包含n)的全部素数的
列表，并打印这些素数的列表
L=primes(10)
print(L)  #[2,3,5,7]
1)　打印100以内的全部素数
2)　打印100~200之间全部的素数的和
4.改写之前的学生信息管理程序,将程序改为两个函数:
def input_student():
        ...#此函数用于获取学生的信息，形成包含有字典的列表
        然后返回此列表
def output_student(L):
        ...#此函数以列格的形式打印学生信息的列表
测试(实现与之前相同的功能):
infos=input_student()
print(infos)
output_student(infos)