生成器  Generator
    生成器是能够动态提供数据的可迭代对象
    生成器在程序运行时生成数据，与容器类不同，它通常不会在内存内
    保存大量的数据，而是现用现生成
生成器有两种：
    生成器函数
    生成器表达式

生成器函数：
    含有 yield 语句的函数是生成器函数，此函数被调用将返回一个生成器对象
    yield 翻译为产生(或生成)

yield 语句
    语法：
        yield 表达式
    说明：
        yield 用于 def 函数中，目的是将此函数作为生成器函数使用
        yield 用来生成数据，供迭代器的 next(it) 函数使用
    示例：
        #此示例示意生成器函数的创建和调用
def myyiled():
    print("即将生成2")
    yield 2
    print("生成器生成结束")

gen=myyiled()  #调用生成器函数生成一个生成器
print(gen)   # generato

it=iter(gen) #从生成器中获取一个迭代器
print(next(it))  #向迭代器要数据，此时生成器函数才会执行下一步
print(next(it)) #触发 StopIteration 异常
生成器函数说明：
    生成器函数调用将返回一个生成器对象，生成器对象时一个可迭代对象
    生成器对象通常是一次性的，通常不可重复使用
    在生成器函数调用 return 会触发一个 StopIteration 异常(即生成数据结束)

#此示例示意生成器函数的创建
#和用for语句来调用生成器函数
def myyiled():
    print("即将生成2")
    yield 2
    print("即将生成3")
    yield 3
    print("即将生成4")
    yield 4
    print("即将生成5")
    yield 5
    print("生成器生成结束")
gen=iter(myyiled())  #调用生成器函数生成一个生成器
for  x  in gen:
    print(x)
生成器的示例：
    #此示例意义用生成器函数生成一系列的整数
def myinteger(n):
    i=0
    while i <n:
        yield i
        i+=1
for x  in myinteger(10):
    print(x)
print("----------------")
it = iter(myinteger(20))
print(next(it))  #0
print(next(it))  #1
L=[x for x in myinteger(20) if x %2==1]
print(L)

练习：
    写一个生成器函数 myeven(start,stop) #用来生成从
    start 开始到stop结束区间的一系列偶数（不包含stop）
    如：
        def myeven(start,stop):
            ...
        evens=list(myeven(10,20))
        print(evens)  #[10,12,14,16,18]
        for x in myeven(21,30):
            print(x)  #打印22,24,26,28

生成器表达式
    语法：
        (表达式 for 变量 in 可迭代对象 [if 真值表达式])
    说明：
        if 子句部分可以省略
    作用：
        用推导式形式创建新的生成器
    示例：
        gen=(x**2 for x in range(1,5))
        it = iter(gen)
        next(it)  #1
        next(it)  #4
        next(it)  #9
        next(it)  #16
        next(it)  # StopIteration 异常

生成器说明：
    生成器即是可迭代对象，同时它自身也是迭代器、

练习：
    1.已知有列表：
        L=[2,3,5,7]
    1）写一个生成器函数，让此函数能够动态的提供数据，数据为
    原列表中数字的平方+1 ，即 x**2+1
    2）写一个生成器表达式，让此表达式能够动态提供数据，数据
    同样为原列表中的数字的平方加1
    3）生成一个列表，此列表内的数据为元列表L中的数字的平方加1
    2.试写一个生成器函数 myfilter(func,iterable)
    要求此函数与python内建的函数的功能完全相同
    如：
        def myfilter(func,iterable):
            ...

        for i in myfilter(lambda x: x%2==1,range(10)):
            print(i)    #1 3 5 7 9
    3.看下面两个程序的执行结果是什么？为什么？
    #程序1
    L = [2,3,5,7]
    A = [x*10 for x in L]
    it=iter(A)
    print(next(it))  #??? 20
    L[1] = 333
    print(next(it))   #??? 30

    #程序2
    L = [2,3,5,7]
    A = (x*10 for x  in L) #<--- 注[]  改为了 ()
    it = iter(A)
    print(next(it))  #??? 20
    L[1] = 333
    print(next(it))   #??? 3330

迭代工具函数
    迭代工具函数的作用是返回一个可迭代对象

函数                说明
zip(iter1,iter2,iter3....) 返回一个zip生成器对象此对象生成一个元组，此元组中的数据
        分别来自于iter1,iter2...可迭代对象提供的数据个数由最小的可迭代对象参数决定
enumerate(iterable,start=0) 创建一个 enumerate 生成器对象，此对象生成类型为(索引，值)
        对的元组，默认索引从零开始，也可以用 start 指定

zip 示例：
numbers = [10086,10000,10010,95588]
names = ["中国移动","中国电信","中国联通"]
for t in zip(numbers,names):
    print(t)    #(10086, '中国移动')(10000, '中国电信')(10010, '中国联通')
d=dict(zip(numbers,names))
print(d)            #{10086: '中国移动', 10000: '中国电信', 10010: '中国联通'}
for name,numb  in zip(names,numbers):
    print(name,"的客服电话是：",numb) #中国移动 的客服电话是： 10086
    #中国电信 的客服电话是： 10000  中国联通 的客服电话是： 10010

示意 zip 函数的内部实现原理，示例见：
    #此示例示意实现一个含有两个形参的zip函数的实现方法
def myzip(iterable1,iterable2):
    it1=iter(iterable1)
    it2=iter(iterable2)
    while True:
        try:
            x1=next(it1)
            x2=next(it2)
            yield (x1,x2)
        except StopIteration:
            return
numbers = [10086,10000,10010,95588]
names = ["中国移动","中国电信","中国联通"]
for t  in myzip(names,numbers):
    print(t)

enumerate 函数示例:
    names = ["中国移动","中国电信","中国联通"]
    for t in enumerate(names):
        print(t) #(0, '中国移动')(1, '中国电信')(2, '中国联通')
    for t in enumerate(names,100):
    print(t) #(100, '中国移动')(101, '中国电信')(102, '中国联通')
    for index,name in enumerate(names):
        if name = "中国联通"
            del names[index]
            break
print(names)
#以下示例示意自己用写函数实现 enumerate 函数的功能
def myenumerate(iterable,start=0):
    it=iter(iterable)
    it1=iter(range(start,start+len(iterable)))
    try:
        while True:
            x1=next(it)
            x2 = next(it1)
            yield (x2,x1)
    except StopIteration:
        return
names = ["中国移动","中国电信","中国联通"]
for t in myenumerate(names,999):
    print(t)
#
# 方法2：
def myenumdrate(iterable,start=0):
    for x in iterable:
        yield (start,x)
        start += 1
names = ["中国移动","中国电信","中国联通"]
for t in myenumerate(names,666):
    print(t)

容器
列表 list 字符串 str 字典 dict 元组 tuple 集合 set 固定集合 frozenset
序列：
    str list tuple bytes bytearray
字节串 bytes 和 字节数组  bytearray
字节串也叫字节序列  bytes
    作用：
        存储以字节为单位的数据
        字节串是不可变的字节序列
字节 byte
    字节是由8个位(bit),组成的存储单元
    字节是0~255之间的整数，用来表示一个字节的取值
创建空字节串的字面值：
    b ''
    b ""
    b ''''''
    b """"""
创建非空字节串的字面值：
    B = b'ABCD'
    B = b"ABCD"
    B = b'\x41\x42'

字节串的构造函数 bytes
    bytes       生成一个空的字节串 等同于  b''
    bytes(整数可迭代对象)       用可迭代对象生成一个字节串
    bytes(整数n)        生成n个值为0的字节串
    bytes(字符串，encoding='utf-8') 用字符串的转换编码生成一个字节串

示例：
    B = bytes()   #B=b''
    B = bytes([65,66,67,68])  #B = b'ABCD'
    B = bytes(5)    #B=b'\x00\x00\x00\x00\x00'
    B = bytes('hello','utf-8')  #B=b'hello'
    B = bytes('hello中文','utf-8') #b'hello\xe4\xb8\xad\xe6\x96\x87'
bytes 的运算：
    + += * *=
    < <= > >= == !=
    in / not in
    索引/切片
    B = b"ABC123"
    b'12'  in B  #True
    65 in B      #True
    print(B[2])   #67
    print(B[0::2])   #b'AC2'

能用于字节串和字节数组的函数：
    len(x)  max(x)  min(x)  sum(x)  any(x)  all(x)

bytes  与  str 的区别：
    bytes 存储字节(0~255的整数)
    str 存储UNICODE字符(0~65535~0x10FFFF的整数)

bytes  与  str  转换
            编码(encode)
    str------------------> bytes
    b = s.encode(encoding='utf-8')
            解码(decode)
    bytes---------------->str
    s = b.decode(encoding='utf-8')

示例：
    s = "ABC中文"
    b = s.encode()      #用utf-8编码规则转为字节串
    s2= b.decode()      #用utf-8编码规则解码为字符串
    print(s == s2)      #True

字节数组    bytearray
    可变的字节序列

构造函数
    bytearray()     创建空的字节数组 生成一个空的字符串数组 等同于 bytearray（b''）
    bytearray(整数可迭代对象)用可迭代对象生成一个字节串数组
    bytearray(整数n)生成n个值为0的字节串数组
    bytearray(字符串，encoding='utf-8')用字符串的转换编码生成一个字节串数组
        (以上参数规则同字节串的规则，返回类型为bytearray)

运算：
    + += * *=
    < <= > >= == !=
    in / not in
    索引/切片
        注：字节数组支持索引赋值和切片赋值，规则同列表的索引和切片赋值
示例：
ba = bytearray([65, 33, 48, 97, 100])
print(ba) #bytearray(b'A!0ad')
ba[1] = 66
ba[3] = 49
print(ba) #bytearray(b'AB01d')

练习:
1. 实现一个python2下的xrange([start,stop,[step]])生成器函数,
    此生成器函数式按range规则来生成一系列整数
    要求:myxrange功能完全相同,不允许调用range函数和列表
    用自己写的myxrange结果生成器表达式求1~10以内所有技术的平方和
    如:
        def myxrange(start,stop=None,step=None):
            ...
        求1**2+3**2+5**2+7**2+9**2
2.写一个程序,从键盘输入一段字符串,用变量s绑定
    1)将此字符串转为字节串用变量b绑定,并打印出此字节串b
    2)打印字符串s的长度和字节串b的长度
    3）将字节串b再转换为字符串用变量s2绑定,然后判断s2 和 s是否相同
3.分解质因数,输入一个正整数,分解质因数
    如
        输入:90
    打印：
        90 = 2*3*3*5
    注:质因数是指最小能被原数整除的素数(不包括1)
4.预习文件操作,面向对象