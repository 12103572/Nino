
装饰器 decorators（专业提高篇）
什么是装饰器
    装饰器是一个函数，主要作用是用来包装另一个函数或类
    作用:
        在不修改被装饰函数的源代码，不改变被装饰函数的调用方式的情况下
        添加或改变原函数的功能
    语法:
        def 装饰器函数名(fn):
            语句块
            return 函数对象
        @装饰器函数名<换行>
        def 被装饰函数名(形参列表):
            语句块
    示例及示意：
    #装饰器原理示意
    #定义装饰器函数，并装饰myfunc
    #装饰器的原理是替换被装饰函数的变量绑定关系
    #用装饰器语法实现方法见:
def mydeco(fn):
    def fx():
        print("+++++++++++")
        fn()
        print("-----------")
    return fx
@mydeco
def myfunc():
    print("myfunc被调用")
# myfunc = mydeco(myfunc)
myfunc()
myfunc()
myfunc()

带参数的装饰器的应用实例:
    #模拟银行业务需求，用装饰器来扩展新功能
    #银行:存钱，取钱

def privileged_check(fn):
    #权限验证功能的装饰器
    def fx(n,x):
        print("权限验证...检查操作用户权限..")
        fn(n,x)
    return fx

def send_message(fn):
    #实现业务操作完成后发送短消息的功能
    def fy(n,x):
        fn(n,x) #先操作再发送消息
        print("正在发短消息给：",n,"...")
    return fy
@send_message
@privileged_check
def savemoney(name,x):
    print(name,"存钱",x,"元")

@send_message
@privileged_check
def withdraw(name,x):
    print(name,"取钱",x,"元")

savemoney("小王",200)
savemoney("小赵",400)

withdraw("小李",500)

函数的文档字符串
    函数内第一次未赋值给任何变量的字符串是函数的文档字符串
    语法：
        def 函数名(参数列表)：
            '函数的文档字符串'
            语句块
    示例：
        def myfunc(x,y,z):
    #这是一个测试文档字符串的函数：
            参数：
                x，随便写点什么
                ...此处省略三行字
            ...
            pass
    说明：
    文档字符串通常用来说明本函数的功能和使用方法
    在交互模式下可以用:>>> help(函数名) 查看函数的文档字符串
    函数的文档字符串绑定在函数的 __doc__属性上

函数的__doc__属性
    用于绑定函数的文档字符串

示例：
def test_fn(x,y,z):
    '''这是字符串的第一行
    这是第二行'''
print(test_fn.__doc__)
#这是字符串的第一行
    #这是第二行

函数定义的完整语法总结：
    def 语句语法：
        [@装饰器1]
        [@装饰器2]
        [...]
    def  函数名([位置形参],[*元组形参]，[命名关键字形参]，[**字典关键字形参]):
        '''文档字符串'''
        语句块
    注：[]表示其中的内容可省略

面试题:
    #此示例示意函数的缺省参数lst=[],列表会在def语句执行时创建并一直绑定，不会释放
    #因此可能会引起函数不可重入问题
    L=[1,2,3]
    def f(n=0,lst=[]):
        lst.append(n)
        print(lst)
    f(4,L)   #[1,2,3,4]
    f(5,L)   #[1,2,3,4,5]
    f(100)   #[100]
    f(200)   #[100，200]
    请问，每个函数打印结果是什么，为什么？
    #改进方法：
    L=[1,2,3]
    def f(n=0,lst=None):
        if lst is None:
            lst=[]   #创建一个新列表并绑定
        lst.append(n)
        print(lst)

模块 Module
    什么是模块
        模块是一个包含有一系列的数据，函数，类等组成的程序组
        模块式一个文件，模块文件名通常是以.py结尾
    作用:
        1.让一些相关的数据，函数，类等有逻辑的组织在一起，使逻辑结构更加清晰
        2.模块中的数据，函数和类可提供给其它模块和程序使用
    模块的分类：
        1.内置模块，在解析器的内部可以直接使用
        2.标准库模块，安装python时已安装且可以直接使用
        3.第三方模块(通常为开源),需要自己安装
            $ pip3 install tensorflow
        4.用户自己编写的模块(可以作为其他人的第三方模块)

模块的导入 import
import 语句
    语法:
        import 模块名1[as 模块新名1][,模块名2[as 模块名2]]
    作用：
        将某模块整体导入到当前模块作用域内
    示例:
        import math
        print(math.factorial(5))
        import time ,sys
    用法:
        模块名.属性名
查看模块属性的函数
    dir(obj) 函数，返回模块内所有属性的列表
    help(obj) 函数，可以查看模块相关的文档字符串

练习：
    1.写一个程序，输入圆的半径，打印出这个圆的面积
    2.输入一个圆的面积，打印出这个圆的半径
        (要求:用math模块里的函数实现，详见：help(math))

from import 语句
语法：
    from 模块名 import 属性名1[as 属性新名1]
                [，属性名2[as 属性新名2]...]
作用：
    将某模块内的一个或多个属性导入到当前模块的作用域
示例:
    from math import factorial(阶乘) as fac
    from math import sin,cos, e
    from math import sqrt,pi
    print(sin(pi/2))
    print(fac(5))   #120

from import *语句
语法：
    from 模块名 import *
作用:
    将某模块的所有属性导入到当前模块
示例:
    from math import *
    print(sin(pi))
    print(factorial(10))

dir 函数
    语法:
        dir([对象]])  返回一个字符串列表
    说明：
        如果没有参数调用，则返回当前作用域内的所有的变量的列表
        如果给定一个对象作为参数，则返回这个对象所有变量的列表
            对于一个模块，返回这个模块的全部变量
            对于一个类，返回类对象的所有变量，并递归基类对象的所有变量
            对于其他对象，返回所有变量，类变量和基类变量
数学模块
    模块名 math
    文档参见：

时间模块
模块名 time
文档参见:

练习：
    写一个程序，输入你的生日(年 月 日)
        1)算出你已经出生了多少天
        1)算出你出生那天是星期几？

练习：
    1.写一个程序，以电子时钟的格式打印时间:
    格式为:
        HH:MM:SS
    如：
    17：51:20
    时间自动变化
    2.编写一个闹钟程序，启动时设置定时时间，到时间后打印一句
    “时间到！！！”然后退出程序
    3.编写函数fun 基本功能是计算下列多项式的和
    Sn=1+1/1!+1/2!....+1/n!
    （建议用数学模块中的factorial）
    求当n得20时，Sn的值
    即：
    print(fun(20))  #2.718281828...
